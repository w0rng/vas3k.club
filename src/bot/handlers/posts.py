import logging

from django.urls import reverse
from telegram import Update
from telegram.ext import CallbackContext

from bot.handlers.common import get_club_user
from club import settings
from posts.models.post import Post
from posts.models.subscriptions import PostSubscription

log = logging.getLogger(__name__)


def subscribe(update: Update, context: CallbackContext) -> None:
    user = get_club_user(update)
    if not user or not user.telegram_id:
        return None

    _, post_id = update.callback_query.data.split(":", 1)
    post = Post.objects.filter(id=post_id).first()
    if not post:
        return None

    _, is_created = PostSubscription.subscribe(
        user=user,
        post=post,
        type=PostSubscription.TYPE_TOP_LEVEL_ONLY,
    )

    if user.telegram_id:
        update.callback_query.answer(
            text=f"–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –∫ –ø–æ—Å—Ç—É ¬´{post.title}¬ª üîî"
        )


def unsubscribe(update: Update, context: CallbackContext) -> None:
    user = get_club_user(update)
    if not user or not user.telegram_id:
        return None

    _, post_id = update.callback_query.data.split(":", 1)
    post = Post.objects.filter(id=post_id).first()
    if not post:
        return None

    is_unsubscribed = PostSubscription.unsubscribe(
        user=user,
        post=post,
    )

    if user.telegram_id:
        post_url = settings.APP_HOST + reverse("show_post", kwargs={
            "post_type": post.type,
            "post_slug": post.slug,
        })

        if is_unsubscribed:
            update.callback_query.answer(
                text=f"–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø–æ—Å—Ç—É ¬´{post.title}¬ª üîï"
            )
        else:
            update.callback_query.answer(
                text="–í—ã –∏ –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫ —ç—Ç–æ–º—É –ø–æ—Å—Ç—É ‚ùå"
            )
