# Generated by Django 3.0.4 on 2020-04-08 10:09

import uuid

import django.contrib.postgres.fields
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('code', models.CharField(max_length=32, primary_key=True, serialize=False, unique=True)),
                ('group', models.CharField(choices=[('programming', 'Программирование'), ('hobby', 'Хобби'), ('personal', 'Личное'), ('other', 'Остальное')], default='other', max_length=32)),
                ('name', models.CharField(max_length=64)),
                ('is_visible', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'tags',
                'ordering': ['group', 'code'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('slug', models.CharField(max_length=32, unique=True)),
                ('card_number', models.IntegerField(default=0)),
                ('email', models.EmailField(max_length=254)),
                ('full_name', models.CharField(max_length=128)),
                ('avatar', models.URLField(blank=True, null=True)),
                ('secret_hash', models.CharField(db_index=True, max_length=16)),
                ('company', models.TextField(null=True)),
                ('position', models.TextField(null=True)),
                ('city', models.CharField(max_length=128, null=True)),
                ('country', models.CharField(max_length=128, null=True)),
                ('bio', models.TextField(null=True)),
                ('hat', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
                ('balance', models.IntegerField(default=0)),
                ('respect', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_activity_at', models.DateTimeField(auto_now=True)),
                ('membership_started_at', models.DateTimeField()),
                ('membership_expires_at', models.DateTimeField()),
                ('membership_platform_type', models.CharField(choices=[('patreon', 'Patreon'), ('stripe', 'Stripe')], default='patreon', max_length=128)),
                ('membership_platform_id', models.CharField(max_length=128, unique=True)),
                ('membership_platform_data', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
                ('membership_type', models.CharField(choices=[('normal', 'Normal'), ('pro', 'Pro')], default='normal', max_length=16)),
                ('email_digest_type', models.CharField(choices=[('nope', 'Nothing'), ('daily', 'Daily'), ('weekly', 'Weekly')], default='weekly', max_length=16)),
                ('telegram_id', models.CharField(max_length=128, null=True)),
                ('telegram_data', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
                ('is_email_verified', models.BooleanField(default=False)),
                ('is_profile_complete', models.BooleanField(default=False)),
                ('is_profile_reviewed', models.BooleanField(default=False)),
                ('is_profile_rejected', models.BooleanField(default=False)),
                ('is_banned_until', models.DateTimeField(null=True)),
                ('roles', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('moderator', 'Модератор'), ('god', 'Режим Бога')], max_length=32), default=list, size=None)),
            ],
            options={
                'db_table': 'users',
            },
        ),
        migrations.CreateModel(
            name='UserTag',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=64)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_tags', to='users.Tag')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tags', to='users.User')),
            ],
            options={
                'db_table': 'user_tags',
                'unique_together': {('tag', 'user')},
            },
        ),
        migrations.CreateModel(
            name='UserExpertise',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('expertise', models.CharField(db_index=True, max_length=32)),
                ('name', models.CharField(max_length=64)),
                ('value', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='expertises', to='users.User')),
            ],
            options={
                'db_table': 'user_expertise',
                'ordering': ['expertise'],
                'unique_together': {('expertise', 'user')},
            },
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type', models.CharField(max_length=32)),
                ('name', models.CharField(max_length=64)),
                ('description', models.CharField(max_length=256, null=True)),
                ('image', models.URLField()),
                ('style', models.CharField(default='', max_length=256, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to='users.User')),
            ],
            options={
                'db_table': 'user_achievements',
                'unique_together': {('type', 'user')},
            },
        ),
    ]
